[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "sparecores-crawler"
version = "0.2.1"
requires-python = ">= 3.7"
dependencies = [
  "alembic",
  "cachier",
  "pydantic",
  "pydantic_extra_types",
  "requests",
  "rich",
  "sqlmodel",
  "typer",
]
authors = [
  { name="Attila Nagy" },
  { name="Gergely Daroczi" },
  { name="Balazs Hodobay" },
]
maintainers = [
  { name="Spare Cores team", email="pkg@sparecores.com" }
]
description = "Pull and standardize data on cloud compute resources."
readme = "README.md"
keywords = ["cloud", "compute", "etl", "sqlite", "spot-instances", "cost-optimization"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
  "Operating System :: OS Independent",
  "Development Status :: 3 - Alpha",
]

[project.urls]
repository = "https://github.com/SpareCores/sc-crawler"
issues = "https://github.com/SpareCores/sc-crawler/issues"
documentation = "https://sparecores.github.io/sc-crawler/"
homepage = "https://sparecores.com"

[project.optional-dependencies]
mkdocs = [
  "markdown==3.5.2", # https://github.com/mkdocstrings/mkdocstrings/issues/662
  "mkdocs",
  "mkdocs-material[imaging]==9.5.13", "mkdocs-material-extensions",
  "mkdocs-autorefs", "mkdocs-gen-files", "mkdocs-literate-nav", "mkdocs-section-index",
  "mkdocstrings[python]>=0.18",
  "griffe", "griffe-inherited-docstrings",
]
testing = ["pytest", "sparecores-crawler[mkdocs]"]
aws = ["boto3"]
hcloud = ["hcloud"]
gcp = ["google-cloud", "google-cloud-compute", "google-cloud-billing"]
vendors = ["sparecores-crawler[aws]", "sparecores-crawler[hcloud]", "sparecores-crawler[gcp]"]
all = ["sparecores-crawler[testing]", "sparecores-crawler[vendors]"]

[project.scripts]
sc-crawler = "sc_crawler.cli:cli"

[tool.setuptools]
include-package-data = true  # see MANIFEST.in

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
